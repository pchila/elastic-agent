// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../core/composable/providers.go

// Package coordinator is a generated GoMock package.
package coordinator

import (
	reflect "reflect"
	time "time"

	composable "github.com/elastic/elastic-agent/internal/pkg/core/composable"
	gomock "github.com/golang/mock/gomock"
)

// MockFetchContextProvider is a mock of FetchContextProvider interface.
type MockFetchContextProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFetchContextProviderMockRecorder
}

// MockFetchContextProviderMockRecorder is the mock recorder for MockFetchContextProvider.
type MockFetchContextProviderMockRecorder struct {
	mock *MockFetchContextProvider
}

// NewMockFetchContextProvider creates a new mock instance.
func NewMockFetchContextProvider(ctrl *gomock.Controller) *MockFetchContextProvider {
	mock := &MockFetchContextProvider{ctrl: ctrl}
	mock.recorder = &MockFetchContextProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchContextProvider) EXPECT() *MockFetchContextProviderMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFetchContextProvider) Fetch(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFetchContextProviderMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFetchContextProvider)(nil).Fetch), arg0)
}

// Run mocks base method.
func (m *MockFetchContextProvider) Run(arg0 composable.ContextProviderComm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockFetchContextProviderMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFetchContextProvider)(nil).Run), arg0)
}

// MockContextProviderComm is a mock of ContextProviderComm interface.
type MockContextProviderComm struct {
	ctrl     *gomock.Controller
	recorder *MockContextProviderCommMockRecorder
}

// MockContextProviderCommMockRecorder is the mock recorder for MockContextProviderComm.
type MockContextProviderCommMockRecorder struct {
	mock *MockContextProviderComm
}

// NewMockContextProviderComm creates a new mock instance.
func NewMockContextProviderComm(ctrl *gomock.Controller) *MockContextProviderComm {
	mock := &MockContextProviderComm{ctrl: ctrl}
	mock.recorder = &MockContextProviderCommMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextProviderComm) EXPECT() *MockContextProviderCommMockRecorder {
	return m.recorder
}

// Deadline mocks base method.
func (m *MockContextProviderComm) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextProviderCommMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContextProviderComm)(nil).Deadline))
}

// Done mocks base method.
func (m *MockContextProviderComm) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextProviderCommMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContextProviderComm)(nil).Done))
}

// Err mocks base method.
func (m *MockContextProviderComm) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextProviderCommMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContextProviderComm)(nil).Err))
}

// Set mocks base method.
func (m *MockContextProviderComm) Set(arg0 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockContextProviderCommMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockContextProviderComm)(nil).Set), arg0)
}

// Value mocks base method.
func (m *MockContextProviderComm) Value(key any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextProviderCommMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContextProviderComm)(nil).Value), key)
}

// MockContextProvider is a mock of ContextProvider interface.
type MockContextProvider struct {
	ctrl     *gomock.Controller
	recorder *MockContextProviderMockRecorder
}

// MockContextProviderMockRecorder is the mock recorder for MockContextProvider.
type MockContextProviderMockRecorder struct {
	mock *MockContextProvider
}

// NewMockContextProvider creates a new mock instance.
func NewMockContextProvider(ctrl *gomock.Controller) *MockContextProvider {
	mock := &MockContextProvider{ctrl: ctrl}
	mock.recorder = &MockContextProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextProvider) EXPECT() *MockContextProviderMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockContextProvider) Run(arg0 composable.ContextProviderComm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockContextProviderMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockContextProvider)(nil).Run), arg0)
}
