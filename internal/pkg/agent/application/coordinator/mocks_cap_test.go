// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../capabilities/capabilities.go

// Package coordinator is a generated GoMock package.
package coordinator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCapability is a mock of Capability interface.
type MockCapability struct {
	ctrl     *gomock.Controller
	recorder *MockCapabilityMockRecorder
}

// MockCapabilityMockRecorder is the mock recorder for MockCapability.
type MockCapabilityMockRecorder struct {
	mock *MockCapability
}

// NewMockCapability creates a new mock instance.
func NewMockCapability(ctrl *gomock.Controller) *MockCapability {
	mock := &MockCapability{ctrl: ctrl}
	mock.recorder = &MockCapabilityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapability) EXPECT() *MockCapabilityMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockCapability) Apply(arg0 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockCapabilityMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockCapability)(nil).Apply), arg0)
}
