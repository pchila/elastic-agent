// Code generated by mockery v2.23.1. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package mocks

import (
	upgrade "github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade"
	mock "github.com/stretchr/testify/mock"
)

// Migration is an autogenerated mock type for the Migration type
type Migration struct {
	mock.Mock
}

type Migration_Expecter struct {
	mock *mock.Mock
}

func (_m *Migration) EXPECT() *Migration_Expecter {
	return &Migration_Expecter{mock: &_m.Mock}
}

// ID provides a mock function with given fields:
func (_m *Migration) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Migration_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Migration_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Migration_Expecter) ID() *Migration_ID_Call {
	return &Migration_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Migration_ID_Call) Run(run func()) *Migration_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Migration_ID_Call) Return(_a0 string) *Migration_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Migration_ID_Call) RunAndReturn(run func() string) *Migration_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: _a0
func (_m *Migration) Rollback(_a0 upgrade.UpdateMarker) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(upgrade.UpdateMarker) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migration_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type Migration_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - _a0 upgrade.UpdateMarker
func (_e *Migration_Expecter) Rollback(_a0 interface{}) *Migration_Rollback_Call {
	return &Migration_Rollback_Call{Call: _e.mock.On("Rollback", _a0)}
}

func (_c *Migration_Rollback_Call) Run(run func(_a0 upgrade.UpdateMarker)) *Migration_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(upgrade.UpdateMarker))
	})
	return _c
}

func (_c *Migration_Rollback_Call) Return(_a0 error) *Migration_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Migration_Rollback_Call) RunAndReturn(run func(upgrade.UpdateMarker) error) *Migration_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function with given fields: _a0
func (_m *Migration) Upgrade(_a0 upgrade.UpdateMarker) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(upgrade.UpdateMarker) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migration_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type Migration_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - _a0 upgrade.UpdateMarker
func (_e *Migration_Expecter) Upgrade(_a0 interface{}) *Migration_Upgrade_Call {
	return &Migration_Upgrade_Call{Call: _e.mock.On("Upgrade", _a0)}
}

func (_c *Migration_Upgrade_Call) Run(run func(_a0 upgrade.UpdateMarker)) *Migration_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(upgrade.UpdateMarker))
	})
	return _c
}

func (_c *Migration_Upgrade_Call) Return(_a0 error) *Migration_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Migration_Upgrade_Call) RunAndReturn(run func(upgrade.UpdateMarker) error) *Migration_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMigration interface {
	mock.TestingT
	Cleanup(func())
}

// NewMigration creates a new instance of Migration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMigration(t mockConstructorTestingTNewMigration) *Migration {
	mock := &Migration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
