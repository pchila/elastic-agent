// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	upgrade "github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade"
)

// UpdateMarkerReader is an autogenerated mock type for the UpdateMarkerReader type
type UpdateMarkerReader struct {
	mock.Mock
}

type UpdateMarkerReader_Expecter struct {
	mock *mock.Mock
}

func (_m *UpdateMarkerReader) EXPECT() *UpdateMarkerReader_Expecter {
	return &UpdateMarkerReader_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields:
func (_m *UpdateMarkerReader) Read() (*upgrade.UpdateMarker, error) {
	ret := _m.Called()

	var r0 *upgrade.UpdateMarker
	var r1 error
	if rf, ok := ret.Get(0).(func() (*upgrade.UpdateMarker, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *upgrade.UpdateMarker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*upgrade.UpdateMarker)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMarkerReader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type UpdateMarkerReader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *UpdateMarkerReader_Expecter) Read() *UpdateMarkerReader_Read_Call {
	return &UpdateMarkerReader_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *UpdateMarkerReader_Read_Call) Run(run func()) *UpdateMarkerReader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UpdateMarkerReader_Read_Call) Return(_a0 *upgrade.UpdateMarker, _a1 error) *UpdateMarkerReader_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UpdateMarkerReader_Read_Call) RunAndReturn(run func() (*upgrade.UpdateMarker, error)) *UpdateMarkerReader_Read_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUpdateMarkerReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewUpdateMarkerReader creates a new instance of UpdateMarkerReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUpdateMarkerReader(t mockConstructorTestingTNewUpdateMarkerReader) *UpdateMarkerReader {
	mock := &UpdateMarkerReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
