// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Vault is an autogenerated mock type for the Vault type
type Vault struct {
	mock.Mock
}

type Vault_Expecter struct {
	mock *mock.Mock
}

func (_m *Vault) EXPECT() *Vault_Expecter {
	return &Vault_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Vault) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Vault_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Vault_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Vault_Expecter) Close() *Vault_Close_Call {
	return &Vault_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Vault_Close_Call) Run(run func()) *Vault_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Vault_Close_Call) Return(_a0 error) *Vault_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Vault_Close_Call) RunAndReturn(run func() error) *Vault_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, key
func (_m *Vault) Exists(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vault_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Vault_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Vault_Expecter) Exists(ctx interface{}, key interface{}) *Vault_Exists_Call {
	return &Vault_Exists_Call{Call: _e.mock.On("Exists", ctx, key)}
}

func (_c *Vault_Exists_Call) Run(run func(ctx context.Context, key string)) *Vault_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Vault_Exists_Call) Return(_a0 bool, _a1 error) *Vault_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Vault_Exists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Vault_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *Vault) Get(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vault_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Vault_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Vault_Expecter) Get(ctx interface{}, key interface{}) *Vault_Get_Call {
	return &Vault_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Vault_Get_Call) Run(run func(ctx context.Context, key string)) *Vault_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Vault_Get_Call) Return(dec []byte, err error) *Vault_Get_Call {
	_c.Call.Return(dec, err)
	return _c
}

func (_c *Vault_Get_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *Vault_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, key
func (_m *Vault) Remove(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Vault_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Vault_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Vault_Expecter) Remove(ctx interface{}, key interface{}) *Vault_Remove_Call {
	return &Vault_Remove_Call{Call: _e.mock.On("Remove", ctx, key)}
}

func (_c *Vault_Remove_Call) Run(run func(ctx context.Context, key string)) *Vault_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Vault_Remove_Call) Return(err error) *Vault_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Vault_Remove_Call) RunAndReturn(run func(context.Context, string) error) *Vault_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, data
func (_m *Vault) Set(ctx context.Context, key string, data []byte) error {
	ret := _m.Called(ctx, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Vault_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Vault_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - data []byte
func (_e *Vault_Expecter) Set(ctx interface{}, key interface{}, data interface{}) *Vault_Set_Call {
	return &Vault_Set_Call{Call: _e.mock.On("Set", ctx, key, data)}
}

func (_c *Vault_Set_Call) Run(run func(ctx context.Context, key string, data []byte)) *Vault_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *Vault_Set_Call) Return(err error) *Vault_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Vault_Set_Call) RunAndReturn(run func(context.Context, string, []byte) error) *Vault_Set_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewVault interface {
	mock.TestingT
	Cleanup(func())
}

// NewVault creates a new instance of Vault. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVault(t mockConstructorTestingTNewVault) *Vault {
	mock := &Vault{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
